{"ast":null,"code":"import { createSelector } from 'reselect';\nimport memoize from 'lodash.memoize';\n\nconst selectShop = state => state.shop;\n\nexport const selectShopCollections = createSelector([selectShop], shop => shop.collections);\nexport const selectCollectionArray = createSelector([selectShopCollections], collections => Object.keys(collections)); // ne quick addition, our selectCollection function we just wrote is not memoized due to collectionUrlParam being passed in from our collection component's mapStateToProps running whenever our state changes and and calling a new instance of our selectCollection function. In this case collectionUrlParam is a dynamic argument meaning it can change, so to memoize selectCollection we actually have to memoize the whole function using a memoize helper function. We can leverage the lodash library, specifically their memoize helper function by adding it our packages like so:\n\nexport const selectCollection = memoize(collectionUrlParam => createSelector([selectShopCollections], collections => {\n  const array = Object.keys(collections); // .map((key) => collections[key]);\n\n  console.log('array', array);\n  console.log('collections', collections); // return array[collectionUrlParam];\n\n  return array; // return collections[collectionUrlParam];\n}));","map":{"version":3,"sources":["/home/sam/sam/projects/clothing-ecommerce/src/redux/shop/shop.selector.js"],"names":["createSelector","memoize","selectShop","state","shop","selectShopCollections","collections","selectCollectionArray","Object","keys","selectCollection","collectionUrlParam","array","console","log"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAApC;;AAEA,OAAO,MAAMC,qBAAqB,GAAGL,cAAc,CACjD,CAACE,UAAD,CADiD,EAEhDE,IAAD,IAAUA,IAAI,CAACE,WAFkC,CAA5C;AAKP,OAAO,MAAMC,qBAAqB,GAAGP,cAAc,CACjD,CAACK,qBAAD,CADiD,EAEhDC,WAAD,IAAiBE,MAAM,CAACC,IAAP,CAAYH,WAAZ,CAFgC,CAA5C,C,CAKP;;AACA,OAAO,MAAMI,gBAAgB,GAAGT,OAAO,CAAEU,kBAAD,IACtCX,cAAc,CAAC,CAACK,qBAAD,CAAD,EAA2BC,WAAD,IAAiB;AACvD,QAAMM,KAAK,GAAGJ,MAAM,CAACC,IAAP,CAAYH,WAAZ,CAAd,CADuD,CAEvD;;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BR,WAA3B,EAJuD,CAKvD;;AACA,SAAOM,KAAP,CANuD,CAOvD;AACD,CARa,CADuB,CAAhC","sourcesContent":["import { createSelector } from 'reselect';\nimport memoize from 'lodash.memoize';\n\nconst selectShop = (state) => state.shop;\n\nexport const selectShopCollections = createSelector(\n  [selectShop],\n  (shop) => shop.collections\n);\n\nexport const selectCollectionArray = createSelector(\n  [selectShopCollections],\n  (collections) => Object.keys(collections)\n);\n\n// ne quick addition, our selectCollection function we just wrote is not memoized due to collectionUrlParam being passed in from our collection component's mapStateToProps running whenever our state changes and and calling a new instance of our selectCollection function. In this case collectionUrlParam is a dynamic argument meaning it can change, so to memoize selectCollection we actually have to memoize the whole function using a memoize helper function. We can leverage the lodash library, specifically their memoize helper function by adding it our packages like so:\nexport const selectCollection = memoize((collectionUrlParam) =>\n  createSelector([selectShopCollections], (collections) => {\n    const array = Object.keys(collections);\n    // .map((key) => collections[key]);\n    console.log('array', array);\n    console.log('collections', collections);\n    // return array[collectionUrlParam];\n    return array;\n    // return collections[collectionUrlParam];\n  })\n);\n"]},"metadata":{},"sourceType":"module"}